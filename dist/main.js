'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _arrayEquals = require('./utils/arrayEquals');

var _arrayEquals2 = _interopRequireDefault(_arrayEquals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 *  Return an object containing the keys that have different values in
 *  two structuraly similar objects.
 *  @method  deepDiff
 *  @param   {Object}   obj1                 First object
 *  @param   {Object}   obj2                 Second object, keys that have different values from
 *                                            their counterpart in obj1 will be returned
 *  @param   {Boolean}  [keepNewKeys=false]  If set to true, keys that doesn't exist in obj2 but
 *                                            exist in obj2 will be returned.
 *  @return  {Object}                        A diff object
 */
function deepDiff(obj1, obj2) {
  var keepNewKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if ((typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) !== 'object') {
    throw new TypeError('First parameter must be an object');
  }

  if ((typeof obj2 === 'undefined' ? 'undefined' : _typeof(obj2)) !== 'object') {
    throw new TypeError('Second parameter must be an object');
  }

  var diff = {};

  Object.keys(obj2).forEach(function (key) {
    if (!obj1.hasOwnProperty(key) && !keepNewKeys) {
      return;
    }

    if (obj1[key] === null || obj2[key] === null) {
      if (obj1[key] !== obj2[key]) {
        diff[key] = obj2[key];
      }
      return;
    }

    if (_typeof(obj2[key]) === 'object') {
      if (obj2[key] instanceof Array) {
        if (!(0, _arrayEquals2.default)(obj2[key], obj1[key])) {
          diff[key] = obj2[key];
        }

        return;
      }

      diff[key] = deepDiff(obj1[key], obj2[key], keepNewKeys);

      //  Don't keep trace of a null key if it was generated by a recursive use of deepDiff.
      if (diff[key] === null) {
        delete diff[key];
      }

      return;
    }

    if (obj1[key] !== obj2[key]) {
      diff[key] = obj2[key];
      return;
    }
  });

  // If there's no difference between the two objects, return null
  if (Object.keys(diff).length === 0) {
    return null;
  }

  return diff;
}

exports.default = deepDiff;
